% Encoding: windows-1252

@Article{Derr2017,
  author  = {Erik Derr and Sven Bugiel and Sascha Fahl and Yasemin Acar and Michael Backes},
  title   = {Keep me Updated: An Empirical Study of Third-Party Library Updatability on Android},
  journal = {Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security},
  year    = {2017},
}

@Article{Alqahtani2017,
  author   = {Sultan S. Alqahtani, Ellis E. Eghan, Juergen Rilling},
  title    = {Recovering Semantic Traceability Links between APIs and Security Vulnerabilities: An Ontological Modeling Approach},
  journal  = {2017 IEEE International Conference on Software Testing, Verification and Validation (ICST)},
  year     = {2017},
  abstract = {Over the last decade, a globalization of the software industry took place, which facilitated the sharing and reuse of code across existing project boundaries. At the same time, such global reuse also introduces new challenges to the software engineering community, with not only components but also their problems and vulnerabilities being now shared. For example, vulnerabilities found in APIs no longer affect only individual projects but instead might spread across projects and even global software ecosystem borders. Tracing these vulnerabilities at a global scale becomes an inherently difficult task since many of the existing resources required for such analysis still rely on proprietary knowledge representation. In this research, we introduce an ontology-based knowledge modeling approach that can eliminate such information silos. More specifically, we focus on linking security knowledge with other software knowledge to improve traceability and trust in software products (APIs). Our approach takes advantage of the Semantic Web and its reasoning services, to trace and assess the impact of security vulnerabilities across project boundaries. We present a case study, to illustrate the applicability and flexibility of our ontological modeling approach by tracing vulnerabilities across project and resource boundaries.},
  doi      = {10.1109/ICST.2017.15},
  url      = {https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=7927965},
}

@InProceedings{pashchenko2018esem,
  author    = {Ivan Pashchenko and Henrik Plate and Serena Elisa Ponta and Antonino Sabetta and Fabio Massacci},
  title     = {Vulnerable Open Source Dependencies: Counting Those That Matter},
  booktitle = {Proceedings of the 12th International Symposium on Empirical Software Engineering and Measurement (ESEM)},
  year      = {2018},
  month     = {Oct},
}

@InProceedings{Plate2015,
  author    = {H. {Plate} and S. E. {Ponta} and A. {Sabetta}},
  title     = {Impact assessment for vulnerabilities in open-source software libraries},
  booktitle = {2015 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
  year      = {2015},
  pages     = {411-420},
  month     = {Sep.},
  abstract  = {Software applications integrate more and more open-source software (OSS) to benefit from code reuse. As a drawback, each vulnerability discovered in bundled OSS may potentially affect the application that includes it. Upon the disclosure of every new vulnerability, the application vendor has to assess whether such vulnerability is exploitable in the particular usage context of the applications, and needs to determine whether customers require an urgent patch containing a non-vulnerable version of the OSS. Unfortunately, current decision making relies mostly on natural-language vulnerability descriptions and expert knowledge, and is therefore difficult, time-consuming, and error-prone. This paper proposes a novel approach to support the impact assessment based on the analysis of code changes introduced by security fixes. We describe our approach using an illustrative example and perform a comparison with both proprietary and open-source state-of-the-art solutions. Finally we report on our experience with a sample application and two industrial development projects.},
  doi       = {10.1109/ICSM.2015.7332492},
  keywords  = {decision making;public domain software;software libraries;open-source software library;OSS;decision making;natural-language vulnerability description;Libraries;Security;Runtime;Open source software;Java;Engines},
}

@Article{Kula2018,
  author  = {Kula, R.G., German, D.M., Ouni, A.},
  title   = {Do developers update their library dependencies?},
  journal = {Empirical Software Engineering},
  year    = {2018},
  volume  = {23},
  doi     = {4-017-9521-5},
  url     = {https://link.springer.com/content/pdf/10.1007/s10664-017-9521-5.pdf},
}

@InProceedings{Cadariu2015,
  author    = {M. {Cadariu} and E. {Bouwers} and J. {Visser} and A. {van Deursen}},
  title     = {Tracking known security vulnerabilities in proprietary software systems},
  booktitle = {2015 IEEE 22nd International Conference on Software Analysis, Evolution, and Reengineering (SANER)},
  year      = {2015},
  pages     = {516-519},
  month     = {March},
  abstract  = {Known security vulnerabilities can be introduced in software systems as a result of being dependent upon third-party components. These documented software weaknesses are “hiding in plain sight” and represent low hanging fruit for attackers. In this paper we present the Vulnerability Alert Service (VAS), a tool-based process to track known vulnerabilities in software systems throughout their life cycle. We studied its usefulness in the context of external software product quality monitoring provided by the Software Improvement Group, a software advisory company based in Amsterdam, the Netherlands. Besides empirically assessing the usefulness of the VAS, we have also leveraged it to gain insight and report on the prevalence of third-party components with known security vulnerabilities in proprietary applications.},
  doi       = {10.1109/SANER.2015.7081868},
  keywords  = {outsourcing;safety-critical software;software houses;software quality;known security vulnerability tracking;proprietary software systems;third-party components;documented software weaknesses;vulnerability alert service;tool-based process;software systems;software life cycle;external software product quality monitoring;software improvement group;software advisory company;Amsterdam;Netherlands;empirical analysis;VAS usefulness assessment;proprietary applications;Security;Monitoring;Software systems;Java;Context;Companies},
}

@InProceedings{Decan2018,
  author    = {A. {Decan} and T. {Mens} and E. {Constantinou}},
  title     = {On the Impact of Security Vulnerabilities in the npm Package Dependency Network},
  booktitle = {2018 IEEE/ACM 15th International Conference on Mining Software Repositories (MSR)},
  year      = {2018},
  pages     = {181-191},
  month     = {May},
  abstract  = {Security vulnerabilities are among the most pressing problems in open source software package libraries. It may take a long time to discover and fix vulnerabilities in packages. In addition, vulnerabilities may propagate to dependent packages, making them vulnerable too. This paper presents an empirical study of nearly 400 security reports over a 6-year period in the npm dependency network containing over 610k JavaScript packages. Taking into account the severity of vulnerabilities, we analyse how and when these vulnerabilities are discovered and fixed, and to which extent they affect other packages in the packaging ecosystem in presence of dependency constraints. We report our findings and provide guidelines for package maintainers and tool developers to improve the process of dealing with security issues.},
  keywords  = {libraries;public domain software;security of data;software packages;security vulnerabilities;npm package dependency network;open source software package libraries;dependent packages;packaging ecosystem;dependency constraints;package maintainers;security issues;security reports;JavaScript packages;Security;Software;Libraries;Data mining;Semantics;Pressing;Ecosystems;software repository mining;software ecosystem;dependency network;security vulnerability;semantic versioning},
  url       = {https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=8595201},
}

@InProceedings{Perl2015,
  author = {Perl, Henning and Dechand, Sergej and Smith, Matthew and Arp, Daniel and Yamaguchi, Fabian and Rieck, Konrad and Fahl, Sascha and Acar, Yasemin},
  title  = {VCCFinder: Finding Potential Vulnerabilities in Open-Source Projects to Assist Code Audits},
  year   = {2015},
  pages  = {426-437},
  month  = {10},
  doi    = {10.1145/2810103.2813604},
}

@Article{Alqahtani2016,
  author  = {Alqahtani, Sultan and Eghan, Ellis and Rilling, Juergen},
  title   = {Tracing known security vulnerabilities in software repositories - A Semantic Web enabled modeling approach},
  journal = {Science of Computer Programming},
  year    = {2016},
  volume  = {121},
  month   = {02},
  doi     = {10.1016/j.scico.2016.01.005},
}

@InProceedings{Nguyen2013,
  author    = {Nguyen, Viet Hung and Massacci, Fabio},
  title     = {The (Un)Reliability of NVD Vulnerable Versions Data: An Empirical Experiment on Google Chrome Vulnerabilities},
  booktitle = {Proceedings of the 8th ACM SIGSAC Symposium on Information, Computer and Communications Security},
  year      = {2013},
  series    = {ASIA CCS '13},
  pages     = {493--498},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {2484377},
  doi       = {10.1145/2484313.2484377},
  isbn      = {978-1-4503-1767-2},
  keywords  = {nvd reliability, software security, vulnerability analysis},
  location  = {Hangzhou, China},
  numpages  = {6},
  url       = {http://doi.acm.org/10.1145/2484313.2484377},
}

@InProceedings{Cox2015,
  author    = {Cox, Jo\"{e}l and Bouwers, Eric and van Eekelen, Marko and Visser, Joost},
  title     = {Measuring Dependency Freshness in Software Systems},
  booktitle = {Proceedings of the 37th International Conference on Software Engineering - Volume 2},
  year      = {2015},
  series    = {ICSE '15},
  pages     = {109--118},
  address   = {Piscataway, NJ, USA},
  publisher = {IEEE Press},
  acmid     = {2819027},
  location  = {Florence, Italy},
  numpages  = {10},
  url       = {http://dl.acm.org/citation.cfm?id=2819009.2819027},
}

@Article{Nguyen2016,
  author     = {Nguyen, Viet Hung and Dashevskyi, Stanislav and Massacci, Fabio},
  title      = {An Automatic Method for Assessing the Versions Affected by a Vulnerability},
  journal    = {Empirical Softw. Engg.},
  year       = {2016},
  volume     = {21},
  number     = {6},
  pages      = {2268--2297},
  month      = dec,
  issn       = {1382-3256},
  acmid      = {3023247},
  address    = {Hingham, MA, USA},
  doi        = {10.1007/s10664-015-9408-2},
  issue_date = {December 2016},
  keywords   = {Browsers, Empirical validation, National vulnerability database (NVD), Software security, Vulnerability analysis},
  numpages   = {30},
  publisher  = {Kluwer Academic Publishers},
  url        = {https://doi.org/10.1007/s10664-015-9408-2},
}

@Article{Kaplan1958,
  author    = {E. L. Kaplan and Paul Meier},
  title     = {Nonparametric Estimation from Incomplete Observations},
  journal   = {Journal of the American Statistical Association},
  year      = {1958},
  volume    = {53},
  number    = {282},
  pages     = {457--481},
  issn      = {01621459},
  abstract  = {In lifetesting, medical follow-up, and other fields the observation of the time of occurrence of the event of interest (called a death) may be prevented for some of the items of the sample by the previous occurrence of some other event (called a loss). Losses may be either accidental or controlled, the latter resulting from a decision to terminate certain observations. In either case it is usually assumed in this paper that the lifetime (age at death) is independent of the potential loss time; in practice this assumption deserves careful scrutiny. Despite the resulting incompleteness of the data, it is desired to estimate the proportion P(t) of items in the population whose lifetimes would exceed t (in the absence of such losses), without making any assumption about the form of the function P(t). The observation for each item of a suitable initial event, marking the beginning of its lifetime, is presupposed. For random samples of size N the product-limit (PL) estimate can be defined as follows: List and label the N observed lifetimes (whether to death or loss) in order of increasing magnitude, so that one has 0 ? t1' ? t2' ? ? ? tN'. Then $\hat{P}(t) = \prod_r \lbrack(N - r)/(N - r + 1)\rbrack$, where r assumes those values for which tr' ? t and for which tr' measures the time to death. This estimate is the distribution, unrestricted as to form, which maximizes the likelihood of the observations. Other estimates that are discussed are the actuarial estimates (which are also products, but with the number of factors usually reduced by grouping); and reduced-sample (RS) estimates, which require that losses not be accidental, so that the limits of observation (potential loss times) are known even for those items whose deaths are observed. When no losses occur at ages less than t, the estimate of P(t) in all cases reduces to the usual binomial estimate, namely, the observed proportion of survivors.},
  publisher = {[American Statistical Association, Taylor \& Francis, Ltd.]},
  url       = {http://www.jstor.org/stable/2281868},
}

@Article{williams2012unfortunate,
  author  = {Williams, Jeff and Dabirsiaghi, Arshan},
  title   = {The unfortunate reality of insecure libraries},
  journal = {Asp. Secur. Inc},
  year    = {2012},
  pages   = {1--26},
}

@Article{Decan,
  author = {Alexandre Decan and Tom Mens Philippe Grosjean},
  title  = {An empirical comparison of dependency network evolution in seven software packaging ecosystems},
  url    = {https://link.springer.com/content/pdf/10.1007/s10664-017-9589-y.pdf},
}

@Dataset{Nesbitt2017,
  author    = {Andrew Nesbitt and Benjamin Nickolls},
  title     = {{Libraries.io Open Source Repository and Dependency Metadata}},
  month     = jun,
  year      = {2017},
  doi       = {10.5281/zenodo.808273},
  publisher = {Zenodo},
  url       = {https://doi.org/10.5281/zenodo.808273},
  version   = {1.0.0},
}

@Comment{jabref-meta: databaseType:bibtex;}
