% Encoding: windows-1252

@Article{Derr2017,
  author  = {Erik Derr and Sven Bugiel and Sascha Fahl and Yasemin Acar and Michael Backes},
  title   = {Keep me Updated: An Empirical Study of Third-Party Library Updatability on Android},
  journal = {Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security},
  year    = {2017},
  comment = {Covered},
  url     = {https://dl.acm.org/citation.cfm?id=3134059},
}

@Article{Alqahtani2017,
  author   = {Sultan S. Alqahtani, Ellis E. Eghan, Juergen Rilling},
  title    = {Recovering Semantic Traceability Links between APIs and Security Vulnerabilities: An Ontological Modeling Approach},
  journal  = {2017 IEEE International Conference on Software Testing, Verification and Validation (ICST)},
  year     = {2017},
  abstract = {Over the last decade, a globalization of the software industry took place, which facilitated the sharing and reuse of code across existing project boundaries. At the same time, such global reuse also introduces new challenges to the software engineering community, with not only components but also their problems and vulnerabilities being now shared. For example, vulnerabilities found in APIs no longer affect only individual projects but instead might spread across projects and even global software ecosystem borders. Tracing these vulnerabilities at a global scale becomes an inherently difficult task since many of the existing resources required for such analysis still rely on proprietary knowledge representation. In this research, we introduce an ontology-based knowledge modeling approach that can eliminate such information silos. More specifically, we focus on linking security knowledge with other software knowledge to improve traceability and trust in software products (APIs). Our approach takes advantage of the Semantic Web and its reasoning services, to trace and assess the impact of security vulnerabilities across project boundaries. We present a case study, to illustrate the applicability and flexibility of our ontological modeling approach by tracing vulnerabilities across project and resource boundaries.},
  doi      = {10.1109/ICST.2017.15},
  url      = {https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=7927965},
}

@InProceedings{pashchenko2018esem,
  author    = {Ivan Pashchenko and Henrik Plate and Serena Elisa Ponta and Antonino Sabetta and Fabio Massacci},
  title     = {Vulnerable Open Source Dependencies: Counting Those That Matter},
  booktitle = {Proceedings of the 12th International Symposium on Empirical Software Engineering and Measurement (ESEM)},
  year      = {2018},
  month     = {Oct},
}

@InProceedings{Plate2015,
  author    = {H. {Plate} and S. E. {Ponta} and A. {Sabetta}},
  title     = {Impact assessment for vulnerabilities in open-source software libraries},
  booktitle = {2015 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
  year      = {2015},
  pages     = {411-420},
  month     = {Sep.},
  abstract  = {Software applications integrate more and more open-source software (OSS) to benefit from code reuse. As a drawback, each vulnerability discovered in bundled OSS may potentially affect the application that includes it. Upon the disclosure of every new vulnerability, the application vendor has to assess whether such vulnerability is exploitable in the particular usage context of the applications, and needs to determine whether customers require an urgent patch containing a non-vulnerable version of the OSS. Unfortunately, current decision making relies mostly on natural-language vulnerability descriptions and expert knowledge, and is therefore difficult, time-consuming, and error-prone. This paper proposes a novel approach to support the impact assessment based on the analysis of code changes introduced by security fixes. We describe our approach using an illustrative example and perform a comparison with both proprietary and open-source state-of-the-art solutions. Finally we report on our experience with a sample application and two industrial development projects.},
  comment   = {detect if a vulnerable library actually impacts a software},
  doi       = {10.1109/ICSM.2015.7332492},
  keywords  = {decision making;public domain software;software libraries;open-source software library;OSS;decision making;natural-language vulnerability description;Libraries;Security;Runtime;Open source software;Java;Engines},
}

@Article{Kula2018,
  author  = {Kula, R.G., German, D.M., Ouni, A.},
  title   = {Do developers update their library dependencies?},
  journal = {Empirical Software Engineering},
  year    = {2018},
  volume  = {23},
  comment = {covered},
  doi     = {4-017-9521-5},
  url     = {https://link.springer.com/content/pdf/10.1007/s10664-017-9521-5.pdf},
}

@InProceedings{Cadariu2015,
  author    = {M. {Cadariu} and E. {Bouwers} and J. {Visser} and A. {van Deursen}},
  title     = {Tracking known security vulnerabilities in proprietary software systems},
  booktitle = {2015 IEEE 22nd International Conference on Software Analysis, Evolution, and Reengineering (SANER)},
  year      = {2015},
  pages     = {516-519},
  month     = {March},
  abstract  = {Known security vulnerabilities can be introduced in software systems as a result of being dependent upon third-party components. These documented software weaknesses are “hiding in plain sight” and represent low hanging fruit for attackers. In this paper we present the Vulnerability Alert Service (VAS), a tool-based process to track known vulnerabilities in software systems throughout their life cycle. We studied its usefulness in the context of external software product quality monitoring provided by the Software Improvement Group, a software advisory company based in Amsterdam, the Netherlands. Besides empirically assessing the usefulness of the VAS, we have also leveraged it to gain insight and report on the prevalence of third-party components with known security vulnerabilities in proprietary applications.},
  comment   = {Proposes an alert system VAS to warn developers about outdated libraries},
  doi       = {10.1109/SANER.2015.7081868},
  keywords  = {outsourcing;safety-critical software;software houses;software quality;known security vulnerability tracking;proprietary software systems;third-party components;documented software weaknesses;vulnerability alert service;tool-based process;software systems;software life cycle;external software product quality monitoring;software improvement group;software advisory company;Amsterdam;Netherlands;empirical analysis;VAS usefulness assessment;proprietary applications;Security;Monitoring;Software systems;Java;Context;Companies},
}

@InProceedings{Decan2018,
  author    = {A. {Decan} and T. {Mens} and E. {Constantinou}},
  title     = {On the Impact of Security Vulnerabilities in the npm Package Dependency Network},
  booktitle = {2018 IEEE/ACM 15th International Conference on Mining Software Repositories (MSR)},
  year      = {2018},
  pages     = {181-191},
  month     = {May},
  abstract  = {Security vulnerabilities are among the most pressing problems in open source software package libraries. It may take a long time to discover and fix vulnerabilities in packages. In addition, vulnerabilities may propagate to dependent packages, making them vulnerable too. This paper presents an empirical study of nearly 400 security reports over a 6-year period in the npm dependency network containing over 610k JavaScript packages. Taking into account the severity of vulnerabilities, we analyse how and when these vulnerabilities are discovered and fixed, and to which extent they affect other packages in the packaging ecosystem in presence of dependency constraints. We report our findings and provide guidelines for package maintainers and tool developers to improve the process of dealing with security issues.},
  keywords  = {libraries;public domain software;security of data;software packages;security vulnerabilities;npm package dependency network;open source software package libraries;dependent packages;packaging ecosystem;dependency constraints;package maintainers;security issues;security reports;JavaScript packages;Security;Software;Libraries;Data mining;Semantics;Pressing;Ecosystems;software repository mining;software ecosystem;dependency network;security vulnerability;semantic versioning},
  url       = {https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=8595201},
}

@InProceedings{Perl2015,
  author = {Perl, Henning and Dechand, Sergej and Smith, Matthew and Arp, Daniel and Yamaguchi, Fabian and Rieck, Konrad and Fahl, Sascha and Acar, Yasemin},
  title  = {VCCFinder: Finding Potential Vulnerabilities in Open-Source Projects to Assist Code Audits},
  year   = {2015},
  pages  = {426-437},
  month  = {10},
  doi    = {10.1145/2810103.2813604},
}

@Article{Alqahtani2016,
  author  = {Alqahtani, Sultan and Eghan, Ellis and Rilling, Juergen},
  title   = {Tracing known security vulnerabilities in software repositories - A Semantic Web enabled modeling approach},
  journal = {Science of Computer Programming},
  year    = {2016},
  volume  = {121},
  month   = {02},
  doi     = {10.1016/j.scico.2016.01.005},
}

@InProceedings{Nguyen2013,
  author    = {Nguyen, Viet Hung and Massacci, Fabio},
  title     = {The (Un)Reliability of NVD Vulnerable Versions Data: An Empirical Experiment on Google Chrome Vulnerabilities},
  booktitle = {Proceedings of the 8th ACM SIGSAC Symposium on Information, Computer and Communications Security},
  year      = {2013},
  series    = {ASIA CCS '13},
  pages     = {493--498},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {2484377},
  doi       = {10.1145/2484313.2484377},
  isbn      = {978-1-4503-1767-2},
  keywords  = {nvd reliability, software security, vulnerability analysis},
  location  = {Hangzhou, China},
  numpages  = {6},
  url       = {http://doi.acm.org/10.1145/2484313.2484377},
}

@InProceedings{Cox2015,
  author    = {Cox, Jo\"{e}l and Bouwers, Eric and van Eekelen, Marko and Visser, Joost},
  title     = {Measuring Dependency Freshness in Software Systems},
  booktitle = {Proceedings of the 37th International Conference on Software Engineering - Volume 2},
  year      = {2015},
  series    = {ICSE '15},
  pages     = {109--118},
  address   = {Piscataway, NJ, USA},
  publisher = {IEEE Press},
  acmid     = {2819027},
  comment   = {Proposes a metric to evaluate dependency freshness},
  location  = {Florence, Italy},
  numpages  = {10},
  url       = {http://dl.acm.org/citation.cfm?id=2819009.2819027},
}

@Article{Nguyen2016,
  author     = {Nguyen, Viet Hung and Dashevskyi, Stanislav and Massacci, Fabio},
  title      = {An Automatic Method for Assessing the Versions Affected by a Vulnerability},
  journal    = {Empirical Softw. Engg.},
  year       = {2016},
  volume     = {21},
  number     = {6},
  pages      = {2268--2297},
  month      = dec,
  issn       = {1382-3256},
  acmid      = {3023247},
  address    = {Hingham, MA, USA},
  comment    = {Method to detect vulnerabilit
Terminology section},
  doi        = {10.1007/s10664-015-9408-2},
  issue_date = {December 2016},
  keywords   = {Browsers, Empirical validation, National vulnerability database (NVD), Software security, Vulnerability analysis},
  numpages   = {30},
  publisher  = {Kluwer Academic Publishers},
  url        = {https://doi.org/10.1007/s10664-015-9408-2},
}

@Article{Kaplan1958,
  author    = {E. L. Kaplan and Paul Meier},
  title     = {Nonparametric Estimation from Incomplete Observations},
  journal   = {Journal of the American Statistical Association},
  year      = {1958},
  volume    = {53},
  number    = {282},
  pages     = {457--481},
  issn      = {01621459},
  abstract  = {In lifetesting, medical follow-up, and other fields the observation of the time of occurrence of the event of interest (called a death) may be prevented for some of the items of the sample by the previous occurrence of some other event (called a loss). Losses may be either accidental or controlled, the latter resulting from a decision to terminate certain observations. In either case it is usually assumed in this paper that the lifetime (age at death) is independent of the potential loss time; in practice this assumption deserves careful scrutiny. Despite the resulting incompleteness of the data, it is desired to estimate the proportion P(t) of items in the population whose lifetimes would exceed t (in the absence of such losses), without making any assumption about the form of the function P(t). The observation for each item of a suitable initial event, marking the beginning of its lifetime, is presupposed. For random samples of size N the product-limit (PL) estimate can be defined as follows: List and label the N observed lifetimes (whether to death or loss) in order of increasing magnitude, so that one has 0 ? t1' ? t2' ? ? ? tN'. Then $\hat{P}(t) = \prod_r \lbrack(N - r)/(N - r + 1)\rbrack$, where r assumes those values for which tr' ? t and for which tr' measures the time to death. This estimate is the distribution, unrestricted as to form, which maximizes the likelihood of the observations. Other estimates that are discussed are the actuarial estimates (which are also products, but with the number of factors usually reduced by grouping); and reduced-sample (RS) estimates, which require that losses not be accidental, so that the limits of observation (potential loss times) are known even for those items whose deaths are observed. When no losses occur at ages less than t, the estimate of P(t) in all cases reduces to the usual binomial estimate, namely, the observed proportion of survivors.},
  publisher = {[American Statistical Association, Taylor \& Francis, Ltd.]},
  url       = {http://www.jstor.org/stable/2281868},
}

@Article{williams2012unfortunate,
  author  = {Williams, Jeff and Dabirsiaghi, Arshan},
  title   = {The unfortunate reality of insecure libraries},
  journal = {Asp. Secur. Inc},
  year    = {2012},
  pages   = {1--26},
}

@Article{Decan,
  author = {Alexandre Decan and Tom Mens Philippe Grosjean},
  title  = {An empirical comparison of dependency network evolution in seven software packaging ecosystems},
  url    = {https://link.springer.com/content/pdf/10.1007/s10664-017-9589-y.pdf},
}

@Dataset{Nesbitt2017,
  author    = {Andrew Nesbitt and Benjamin Nickolls},
  title     = {{Libraries.io Open Source Repository and Dependency Metadata}},
  month     = jun,
  year      = {2017},
  doi       = {10.5281/zenodo.808273},
  publisher = {Zenodo},
  url       = {https://doi.org/10.5281/zenodo.808273},
  version   = {1.0.0},
}

@InProceedings{Robbes:2012:DRA:2393596.2393662,
  author    = {Robbes, Romain and Lungu, Mircea and R\"{o}thlisberger, David},
  title     = {How Do Developers React to API Deprecation?: The Case of a Smalltalk Ecosystem},
  booktitle = {Proceedings of the ACM SIGSOFT 20th International Symposium on the Foundations of Software Engineering},
  year      = {2012},
  series    = {FSE '12},
  pages     = {56:1--56:11},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {2393662},
  articleno = {56},
  doi       = {10.1145/2393596.2393662},
  isbn      = {978-1-4503-1614-9},
  keywords  = {ecosystems, empirical studies, mining software repositories},
  location  = {Cary, North Carolina},
  numpages  = {11},
  url       = {http://doi.acm.org/10.1145/2393596.2393662},
}

@InProceedings{7332471,
  author    = {A. {Hora} and R. {Robbes} and N. {Anquetil} and A. {Etien} and S. {Ducasse} and M. T. {Valente}},
  title     = {How do developers react to API evolution? The Pharo ecosystem case},
  booktitle = {2015 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
  year      = {2015},
  pages     = {251-260},
  month     = {Sep.},
  doi       = {10.1109/ICSM.2015.7332471},
  keywords  = {application program interfaces;software engineering;user interfaces;API evolution;Pharo ecosystem case;software engineering research;user interface;software ecosystems;Ecosystems;Open source software;Context;History;Computer science;Association rules},
}

@InProceedings{7816485,
  author    = {A. A. {Sawant} and R. {Robbes} and A. {Bacchelli}},
  title     = {On the Reaction to Deprecation of 25,357 Clients of 4+1 Popular Java APIs},
  booktitle = {2016 IEEE International Conference on Software Maintenance and Evolution (ICSME)},
  year      = {2016},
  pages     = {400-410},
  month     = {Oct},
  abstract  = {Application Programming Interfaces (APIs) are a tremendous resource-that is, when they are stable. Several studies have shown that this is unfortunately not the case. Of those, a large-scale study of API changes in the Pharo Smalltalk ecosystem documented several findings about API deprecations and their impact on API clients. We conduct a partial replication of this study, considering more than 25,000 clients of five popular Java APIs on GitHub. This work addresses several shortcomings of the previous study, namely: a study of several distinct API clients in a popular, statically-typed language, with more accurate version information. We compare and contrast our findings with the previous study and highlight new ones, particularly on the API client update practices and the startling similarities between reaction behavior in Smalltalk and Java.},
  doi       = {10.1109/ICSME.2016.64},
  keywords  = {Java;public domain software;popular Java APIs;application programming interfaces;Pharo Smalltalk ecosystem;GitHub;Java;Ecosystems;History;Programming;Software;Libraries;Documentation;API;deprecation;mining software repositories},
}

@Article{Bavota2015,
  author   = {Bavota, Gabriele and Canfora, Gerardo and Di Penta, Massimiliano and Oliveto, Rocco and Panichella, Sebastiano},
  title    = {How the Apache community upgrades dependencies: an evolutionary study},
  journal  = {Empirical Software Engineering},
  year     = {2015},
  volume   = {20},
  number   = {5},
  pages    = {1275--1317},
  month    = {Oct},
  issn     = {1573-7616},
  abstract = {Software ecosystems consist of multiple software projects, often interrelated by means of dependency relations. When one project undergoes changes, other projects may decide to upgrade their dependency. For example, a project could use a new version of a component from another project because the latter has been enhanced or subject to some bug-fixing activities. In this paper we study the evolution of dependencies between projects in the Java subset of the Apache ecosystem, consisting of 147 projects, for a period of 14 years, resulting in 1,964 releases. Specifically, we investigate (i) how dependencies between projects evolve over time when the ecosystem grows, (ii) what are the product and process factors that can likely trigger dependency upgrades, (iii) how developers discuss the needs and risks of such upgrades, and (iv) what is the likely impact of upgrades on client projects. The study results---qualitatively confirmed by observations made by analyzing the developers' discussion---indicate that when a new release of a project is issued, it triggers an upgrade when the new release includes major changes (e.g., new features/services) as well as large amount of bug fixes. Instead, developers are reluctant to perform an upgrade when some APIs are removed. The impact of upgrades is generally low, unless it is related to frameworks/libraries used in crosscutting concerns. Results of this study can support the understanding of the of library/component upgrade phenomenon, and provide the basis for a new family of recommenders aimed at supporting developers in the complex (and risky) activity of managing library/component upgrade within their software projects.},
  day      = {01},
  doi      = {10.1007/s10664-014-9325-9},
  url      = {https://doi.org/10.1007/s10664-014-9325-9},
}

@InProceedings{Bogart:2016:BAC:2950290.2950325,
  author    = {Bogart, Christopher and K\"{a}stner, Christian and Herbsleb, James and Thung, Ferdian},
  title     = {How to Break an API: Cost Negotiation and Community Values in Three Software Ecosystems},
  booktitle = {Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering},
  year      = {2016},
  series    = {FSE 2016},
  pages     = {109--120},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {2950325},
  comment   = {How developers are mitigating the risk},
  doi       = {10.1145/2950290.2950325},
  isbn      = {978-1-4503-4218-6},
  keywords  = {Collaboration, Dependency management, Qualitative research, Software ecosystems, semantic versioning},
  location  = {Seattle, WA, USA},
  numpages  = {12},
  url       = {http://doi.acm.org/10.1145/2950290.2950325},
}

@InProceedings{7163055,
  author    = {A. {Nappa} and R. {Johnson} and L. {Bilge} and J. {Caballero} and T. {Dumitras}},
  title     = {The Attack of the Clones: A Study of the Impact of Shared Code on Vulnerability Patching},
  booktitle = {2015 IEEE Symposium on Security and Privacy},
  year      = {2015},
  pages     = {692-708},
  month     = {May},
  abstract  = {Vulnerability exploits remain an important mechanism for malware delivery, despite efforts to speed up the creation of patches and improvements in software updating mechanisms. Vulnerabilities in client applications (e.g., Browsers, multimedia players, document readers and editors) are often exploited in spear phishing attacks and are difficult to characterize using network vulnerability scanners. Analyzing their lifecycle requires observing the deployment of patches on hosts around the world. Using data collected over 5 years on 8.4 million hosts, available through Symantec's WINE platform, we present the first systematic study of patch deployment in client-side vulnerabilities. We analyze the patch deployment process of 1,593 vulnerabilities from 10 popular client applications, and we identify several new threats presented by multiple installations of the same program and by shared libraries distributed with several applications. For the 80 vulnerabilities in our dataset that affect code shared by two applications, the time between patch releases in the different applications is up to 118 days (with a median of 11 days). Furthermore, as the patching rates differ considerably among applications, many hosts patch the vulnerability in one application but not in the other one. We demonstrate two novel attacks that enable exploitation by invoking old versions of applications that are used infrequently, but remain installed. We also find that the median fraction of vulnerable hosts patched when exploits are released is at most 14%. Finally, we show that the patching rate is affected by user-specific and application-specific factors, for example, hosts belonging to security analysts and applications with an automated updating mechanism have significantly lower median times to patch.},
  doi       = {10.1109/SP.2015.48},
  keywords  = {invasive software;software reliability;vulnerability patching;shared code;malware delivery;software updating mechanisms;spear phishing attacks;network vulnerability scanners;software lifecycle analysis;Symantec WINE platform;application-specific factors;user-specific factors;automated updating mechanism;Software;Delays;Libraries;Security;Databases;Sociology;Statistics;software vulnerabilities;patch deployment;shared code;client applications;vulnerability exploits},
}

@Article{Lauinger,
  author = {Tobias Lauinger and Abdelberi Chaabane and Sajjad Arshad and William Robertson and Christo Wilson and Engin Kirda},
  title  = {Thou Shalt Not Depend on Me: Analysing the Use of Outdated JavaScript Libraries on the Web},
  doi    = {10.14722/ndss.2017.23414},
  url    = {https://arxiv.org/abs/1811.00918},
}

@Article{Synopsys2019,
  author  = {Synopsys},
  title   = {2019 Open Source Security And Risk Analysis},
  journal = {Synopsys Open Source Security and Risk Analysis},
  year    = {2019},
}

@InProceedings{Backes2016,
  author    = {Backes, Michael and Bugiel, Sven and Derr, Erik},
  title     = {Reliable Third-Party Library Detection in Android and Its Security Applications},
  booktitle = {Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security},
  year      = {2016},
  series    = {CCS '16},
  pages     = {356--367},
  address   = {New York, NY, USA},
  publisher = {ACM},
  acmid     = {2978333},
  doi       = {10.1145/2976749.2978333},
  isbn      = {978-1-4503-4139-4},
  keywords  = {android, third-party library detection},
  location  = {Vienna, Austria},
  numpages  = {12},
  url       = {http://doi.acm.org/10.1145/2976749.2978333},
}

@Comment{jabref-meta: databaseType:bibtex;}
